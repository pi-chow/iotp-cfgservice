image: registry.d.com/cetiti/maven:3.5.2-jdk-8

variables:
  MAVEN_CLI_OPTS: "-s .m2/settings.xml --batch-mode"
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository"
  
stages:
  - build
  - deploy

cache:
  paths:
    - .m2/repository/

build:dev:
  stage: build
  script: mvn clean package -Pdev
  artifacts:
    paths:
      - target/${PROJECT_NAME}-*.zip
  only:
    - dev

build:demo:
  stage: build
  script: mvn clean package -Pdemo
  artifacts:
    paths:
      - target/${PROJECT_NAME}-*.zip
  only:
    - master
    - tags

deploy:dev:
  stage: deploy
  before_script:
   ###
   ## Install ssh-agent if not already installed, it is required by Docker.
   ## (change apt-get to yum if you use an RPM-based image)
   ##

   - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

   ##
   ## Run ssh-agent (inside the build environment)
   ##
   - eval $(ssh-agent -s)

   ##
   ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
   ## We're using tr to fix line endings which makes ed25519 keys work
   ## without extra base64 encoding.
   ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
   ##
   - echo "${DEV_SERVER_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null

   ##
   ## Create the SSH directory and give it the right permissions
   ##
   - mkdir -p ~/.ssh
   - chmod 700 ~/.ssh

   ## Assuming you created the SSH_KNOWN_HOSTS variable, uncomment the
   ## following two lines.
   ##
   #- echo "$DEV_SERVER_IP" > ~/.ssh/known_hosts
   #- chmod 644 ~/.ssh/known_hosts

   ##
   ## Alternatively, use ssh-keyscan to scan the keys of your private server.
   ## Replace example.com with your private server's domain name. Repeat that
   ## command if you have more than one server to connect to.
   ##
   - ssh-keyscan ${DEV_SERVER_IP} >> ~/.ssh/known_hosts
   - chmod 644 ~/.ssh/known_hosts
  script:
   - export PACKAGE_NAME=$(ls target/)
   - scp target/${PACKAGE_NAME} root@${DEV_SERVER_IP}:${PROJECT_PATH}
   # - ssh root@${DEV_SERVER_IP} "[ -f ${PROJECT_PATH}/${PROJECT_NAME}/stop.sh ] && sh ${PROJECT_PATH}/${PROJECT_NAME}/stop.sh || echo 'not deployed'"
   # - ssh root@${DEV_SERVER_IP} "unzip -o ${PROJECT_PATH}/iotp-cfgservice-cli.zip -d ${PROJECT_PATH};sh ${PROJECT_PATH}/${PROJECT_NAME}/start.sh"
   - ssh root@${DEV_SERVER_IP} "unzip -o ${PROJECT_PATH}/${PACKAGE_NAME} -d ${PROJECT_PATH};cd ${PROJECT_PATH}/${PROJECT_NAME};sh run.sh restart;"
  only:
    - dev

deploy:demo:
  stage: deploy
  before_script:
   ##
   ## Install ssh-agent if not already installed, it is required by Docker.
   ## (change apt-get to yum if you use an RPM-based image)
   ##

   - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'

   ##
   ## Run ssh-agent (inside the build environment)
   ##
   - eval $(ssh-agent -s)

   ##
   ## Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
   ## We're using tr to fix line endings which makes ed25519 keys work
   ## without extra base64 encoding.
   ## https://gitlab.com/gitlab-examples/ssh-private-key/issues/1#note_48526556
   ##
   - echo "${DEMO_SERVER_PRIVATE_KEY}" | tr -d '\r' | ssh-add - > /dev/null

   ##
   ## Create the SSH directory and give it the right permissions
   ##
   - mkdir -p ~/.ssh
   - chmod 700 ~/.ssh

   ## Assuming you created the SSH_KNOWN_HOSTS variable, uncomment the
   ## following two lines.
   ##
   #- echo "$DEV_SERVER_IP" > ~/.ssh/known_hosts
   #- chmod 644 ~/.ssh/known_hosts

   ##
   ## Alternatively, use ssh-keyscan to scan the keys of your private server.
   ## Replace example.com with your private server's domain name. Repeat that
   ## command if you have more than one server to connect to.
   ##
   - ssh-keyscan ${DEMO_SERVER_IP} >> ~/.ssh/known_hosts
   - chmod 644 ~/.ssh/known_hosts
  script:
   - export PACKAGE_NAME=$(ls target/)
   - scp target/${PACKAGE_NAME} root@${DEMO_SERVER_IP}:${PROJECT_PATH}
   # - ssh root@${DEMO_SERVER_IP} "[ -f ${PROJECT_PATH}/${PROJECT_NAME}/stop.sh ] && cd ${PROJECT_PATH}/${PROJECT_NAME}; sh stop.sh || echo 'not deployed'"
   # - ssh root@${DEMO_SERVER_IP} "unzip -o ${PROJECT_PATH}/iotp-cfgservice-cli.zip -d ${PROJECT_PATH};cd ${PROJECT_PATH}/${PROJECT_NAME}; sh start.sh"
   - ssh root@${DEMO_SERVER_IP} "unzip -o ${PROJECT_PATH}/${PACKAGE_NAME} -d ${PROJECT_PATH};cd ${PROJECT_PATH}/${PROJECT_NAME};sh run.sh restart;"
  only: 
    - master
    - tags